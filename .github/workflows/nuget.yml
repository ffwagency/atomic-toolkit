on:
  push:
    branches:
    - 'release/**'
env:
  NUGET_SOURCE_URL: 'https://api.nuget.org/v3/index.json'
jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 5
    steps: 

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/release/}}" >> $GITHUB_OUTPUT
        id: extract_branch
         
      - name: Brnach name
        run: echo "Branch Name= ${{ steps.extract_branch.outputs.branch }}"

      
      - name: Extract project name
        shell: bash
        run: |
         SUBSTRING="${{ steps.extract_branch.outputs.branch }}"
         echo "project=${SUBSTRING%%-*}" >> $GITHUB_OUTPUT
        id: extract_project

      - name: Add project name to env
        shell: bash
        run:  echo "ProjectName=$(echo ${{ steps.extract_project.outputs.project }})" >> $GITHUB_ENV
         

      - name: Extract Project Version
        shell: bash
        run: echo "VERSION=$(echo ${{ steps.extract_branch.outputs.branch }} | sed 's/.*-\(.*\)/\1/')" >> $GITHUB_ENV
        id: extract_version

      - name: Project Name and Version
        run: echo "The project name is ${{ env.ProjectName }} and the version number is ${{ env.VERSION }}" 
           
      

      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Install dotnet'
        uses: actions/setup-dotnet@v1
        with:
         dotnet-version: '7.0.x'

      - name: 'Restore package ${{ env.ProjectName }}'
        run: dotnet restore 'src\${{ env.ProjectName }}\${{ env.ProjectName }}.csproj'

      - name: 'Build project ${{ env.ProjectName }}'
        run: dotnet build 'src\${{ env.ProjectName }}\${{ env.ProjectName }}.csproj' --no-restore --configuration Release /p:Version=${{ env.VERSION }} /p:AssemblyVersion=${{ env.VERSION }}

      
      - name: 'Pack project ${{ env.ProjectName }}'
        run: dotnet pack 'src\${{ env.ProjectName }}\${{ env.ProjectName }}.csproj' --no-restore --no-build --configuration Release --output ${{ github.workspace }}\output\${{ env.ProjectName }} /p:PackageVersion=${{ env.VERSION }} /p:AssemblyVersion=${{ env.VERSION }}
          
     
      - name: 'Push project ${{ env.ProjectName }}'
        run: dotnet nuget push ${{ github.workspace }}\output\${{ env.ProjectName }}\*.nupkg -k ${{SECRETS.NUGET_AUTH_TOKEN }} -s ${{ env.NUGET_SOURCE_URL}} /p:Version=$ProjectVersion